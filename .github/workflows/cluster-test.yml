name: GKE Cluster Test

on:
  workflow_dispatch:
    inputs:
      destroy_after_test:
        description: 'Destroy cluster after test'
        required: false
        default: 'true'
        type: boolean
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  TF_VERSION: "1.9.0"
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  
jobs:
  deploy-and-test:
    name: Deploy and Test GKE Cluster
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var="project_id=${{ env.PROJECT_ID }}"

    - name: Terraform Apply
      run: terraform apply -auto-approve -var="project_id=${{ env.PROJECT_ID }}"

    - name: Configure kubectl
      run: |
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        CLUSTER_LOCATION=$(terraform output -raw cluster_location)
        gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_LOCATION --project ${{ env.PROJECT_ID }}

    - name: Wait for cluster to be ready
      run: |
        echo "Waiting for cluster to be ready..."
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Verify cluster configuration
      run: |
        echo "=== Cluster Info ==="
        kubectl cluster-info
        
        echo "=== Node Information ==="
        kubectl get nodes -o wide
        
        echo "=== Node Pool Configuration ==="
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        CLUSTER_LOCATION=$(terraform output -raw cluster_location)
        gcloud container node-pools list --cluster=$CLUSTER_NAME --zone=$CLUSTER_LOCATION --project=${{ env.PROJECT_ID }}

    - name: Test basic workload deployment
      run: |
        echo "=== Testing workload deployment ==="
        kubectl create deployment test-nginx --image=nginx:alpine --replicas=2
        kubectl expose deployment test-nginx --port=80 --target-port=80 --type=ClusterIP
        
        echo "Waiting for deployment to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/test-nginx
        
        echo "=== Deployment Status ==="
        kubectl get deployments
        kubectl get pods -o wide
        
        echo "=== Testing connectivity ==="
        kubectl run test-curl --image=curlimages/curl:latest --rm -i --restart=Never -- curl -I http://test-nginx
        
        echo "=== Cleanup test resources ==="
        kubectl delete deployment test-nginx
        kubectl delete service test-nginx

    - name: Test autoscaling configuration
      run: |
        echo "=== Testing autoscaling ==="
        kubectl create deployment scale-test --image=nginx:alpine --replicas=1
        kubectl autoscale deployment scale-test --cpu-percent=50 --min=1 --max=3
        kubectl wait --for=condition=available --timeout=300s deployment/scale-test
        
        echo "=== HPA Status ==="
        kubectl get hpa
        
        kubectl delete deployment scale-test
        kubectl delete hpa scale-test

    - name: Verify cost optimization settings
      run: |
        echo "=== Verifying cost optimization ==="
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        CLUSTER_LOCATION=$(terraform output -raw cluster_location)
        
        # Check if cluster is zonal (not regional)
        if [[ "$CLUSTER_LOCATION" == *"-"*"-"* ]]; then
          echo "✅ Cluster is zonal: $CLUSTER_LOCATION"
        else
          echo "❌ Cluster appears to be regional: $CLUSTER_LOCATION"
          exit 1
        fi
        
        # Check node pool configuration
        gcloud container node-pools describe idv-gke-cluster-nodes \
          --cluster=$CLUSTER_NAME \
          --zone=$CLUSTER_LOCATION \
          --project=${{ env.PROJECT_ID }} \
          --format="yaml" > nodepool-config.yaml
        
        # Verify spot instances
        if grep -q "spot: true" nodepool-config.yaml; then
          echo "✅ Spot instances enabled"
        else
          echo "❌ Spot instances not enabled"
          exit 1
        fi
        
        # Verify machine type
        if grep -q "machineType: e2-micro" nodepool-config.yaml; then
          echo "✅ Cost-optimized machine type (e2-micro)"
        else
          echo "❌ Machine type is not e2-micro"
          cat nodepool-config.yaml | grep machineType
          exit 1
        fi
        
        # Verify disk configuration
        if grep -q "diskSizeGb: 20" nodepool-config.yaml; then
          echo "✅ Cost-optimized disk size (20GB)"
        else
          echo "❌ Disk size is not optimized"
          exit 1
        fi

    - name: Test Helm deployment
      run: |
        echo "=== Testing Helm functionality ==="
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update
        
        # Deploy sample application
        helm install test-app bitnami/nginx --set replicaCount=1 --set service.type=ClusterIP
        
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/test-app-nginx
        
        echo "=== Helm deployment status ==="
        helm list
        kubectl get pods -l app.kubernetes.io/name=nginx
        
        # Cleanup
        helm uninstall test-app

    - name: Export cluster information
      run: |
        echo "=== Cluster Summary ==="
        echo "Cluster Name: $(terraform output -raw cluster_name)"
        echo "Cluster Location: $(terraform output -raw cluster_location)"
        echo "Master Version: $(terraform output -raw master_version)"
        echo "Project ID: $(terraform output -raw project_id)"
        
        echo "=== Resource Usage ==="
        kubectl top nodes || echo "Metrics server not ready"

    - name: Terraform Destroy
      if: ${{ github.event.inputs.destroy_after_test == 'true' || github.event_name == 'schedule' }}
      run: |
        echo "Destroying cluster to save costs..."
        terraform destroy -auto-approve -var="project_id=${{ env.PROJECT_ID }}"
        
    - name: Cost Optimization Report
      if: always()
      run: |
        echo "=== Cost Optimization Report ==="
        echo "✅ Zonal deployment (not regional)"
        echo "✅ Spot instances enabled"
        echo "✅ e2-micro machine type"
        echo "✅ 20GB standard disks"
        echo "✅ Minimal OAuth scopes"
        echo "✅ Auto-scaling 1-3 nodes"
        echo "✅ Cluster auto-destruction enabled"