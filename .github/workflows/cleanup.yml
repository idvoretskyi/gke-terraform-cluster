name: Cost Management Cleanup

on:
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force cleanup all resources'
        required: false
        default: false
        type: boolean
  schedule:
    # Run daily at 11 PM UTC to cleanup any lingering resources
    - cron: '0 23 * * *'

env:
  TF_VERSION: "1.9.0"
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  cleanup-resources:
    name: Cleanup GCP Resources
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Check for existing clusters
      id: check_clusters
      run: |
        echo "=== Checking for existing GKE clusters ==="
        clusters=$(gcloud container clusters list --project=${{ env.PROJECT_ID }} --format="value(name,location)" | grep "idv-gke-cluster" || true)
        
        if [ -n "$clusters" ]; then
          echo "Found clusters:"
          echo "$clusters"
          echo "clusters_found=true" >> $GITHUB_OUTPUT
          echo "cluster_list<<EOF" >> $GITHUB_OUTPUT
          echo "$clusters" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No clusters found"
          echo "clusters_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Check cluster age
      if: steps.check_clusters.outputs.clusters_found == 'true'
      id: check_age
      run: |
        echo "=== Checking cluster age ==="
        should_cleanup=false
        
        while IFS=$'\t' read -r cluster_name cluster_location; do
          if [ -n "$cluster_name" ]; then
            echo "Checking cluster: $cluster_name in $cluster_location"
            
            # Get cluster creation time
            creation_time=$(gcloud container clusters describe $cluster_name \
              --zone=$cluster_location \
              --project=${{ env.PROJECT_ID }} \
              --format="value(createTime)")
            
            # Calculate age in hours
            creation_timestamp=$(date -d "$creation_time" +%s)
            current_timestamp=$(date +%s)
            age_seconds=$((current_timestamp - creation_timestamp))
            age_hours=$((age_seconds / 3600))
            
            echo "Cluster age: $age_hours hours"
            
            # Cleanup if older than 4 hours or force cleanup is enabled
            if [ $age_hours -gt 4 ] || [ "${{ github.event.inputs.force_cleanup }}" == "true" ]; then
              echo "Cluster $cluster_name should be cleaned up"
              should_cleanup=true
            else
              echo "Cluster $cluster_name is still young, keeping it"
            fi
          fi
        done <<< "${{ steps.check_clusters.outputs.cluster_list }}"
        
        echo "should_cleanup=$should_cleanup" >> $GITHUB_OUTPUT

    - name: Terraform destroy if clusters exist
      if: steps.check_age.outputs.should_cleanup == 'true'
      run: |
        echo "=== Running Terraform destroy ==="
        terraform init
        
        # Try to destroy using Terraform state if it exists
        if terraform show > /dev/null 2>&1; then
          echo "Terraform state found, using terraform destroy"
          terraform destroy -auto-approve -var="project_id=${{ env.PROJECT_ID }}"
        else
          echo "No Terraform state found, clusters may have been created outside of this workflow"
        fi

    - name: Manual cleanup of remaining clusters
      if: steps.check_clusters.outputs.clusters_found == 'true'
      run: |
        echo "=== Manual cleanup of any remaining clusters ==="
        
        while IFS=$'\t' read -r cluster_name cluster_location; do
          if [ -n "$cluster_name" ]; then
            echo "Attempting to delete cluster: $cluster_name"
            
            # Check if cluster still exists
            if gcloud container clusters describe $cluster_name --zone=$cluster_location --project=${{ env.PROJECT_ID }} > /dev/null 2>&1; then
              creation_time=$(gcloud container clusters describe $cluster_name \
                --zone=$cluster_location \
                --project=${{ env.PROJECT_ID }} \
                --format="value(createTime)")
              
              creation_timestamp=$(date -d "$creation_time" +%s)
              current_timestamp=$(date +%s)
              age_seconds=$((current_timestamp - creation_timestamp))
              age_hours=$((age_seconds / 3600))
              
              if [ $age_hours -gt 4 ] || [ "${{ github.event.inputs.force_cleanup }}" == "true" ]; then
                echo "Deleting old cluster: $cluster_name (age: $age_hours hours)"
                gcloud container clusters delete $cluster_name \
                  --zone=$cluster_location \
                  --project=${{ env.PROJECT_ID }} \
                  --quiet
              else
                echo "Skipping young cluster: $cluster_name (age: $age_hours hours)"
              fi
            else
              echo "Cluster $cluster_name no longer exists"
            fi
          fi
        done <<< "${{ steps.check_clusters.outputs.cluster_list }}"

    - name: Check for orphaned disks
      run: |
        echo "=== Checking for orphaned persistent disks ==="
        disks=$(gcloud compute disks list --project=${{ env.PROJECT_ID }} --filter="name~gke-idv-gke-cluster" --format="value(name,zone)" || true)
        
        if [ -n "$disks" ]; then
          echo "Found potentially orphaned disks:"
          echo "$disks"
          
          while IFS=$'\t' read -r disk_name disk_zone; do
            if [ -n "$disk_name" ]; then
              echo "Checking disk: $disk_name in $disk_zone"
              
              # Check if disk is attached to any instance
              users=$(gcloud compute disks describe $disk_name --zone=$disk_zone --project=${{ env.PROJECT_ID }} --format="value(users)" || true)
              
              if [ -z "$users" ]; then
                echo "Disk $disk_name appears to be orphaned, deleting..."
                gcloud compute disks delete $disk_name --zone=$disk_zone --project=${{ env.PROJECT_ID }} --quiet || true
              else
                echo "Disk $disk_name is still in use, keeping it"
              fi
            fi
          done <<< "$disks"
        else
          echo "No orphaned disks found"
        fi

    - name: Cost summary
      if: always()
      run: |
        echo "=== Cost Management Summary ==="
        echo "Timestamp: $(date)"
        echo "Project: ${{ env.PROJECT_ID }}"
        echo "Force cleanup: ${{ github.event.inputs.force_cleanup }}"
        
        remaining_clusters=$(gcloud container clusters list --project=${{ env.PROJECT_ID }} --format="value(name)" | grep "idv-gke-cluster" || true)
        if [ -n "$remaining_clusters" ]; then
          echo "⚠️  Remaining clusters:"
          echo "$remaining_clusters"
        else
          echo "✅ No GKE clusters found - cost optimized!"
        fi
        
        echo ""
        echo "💡 Cost saving tips:"
        echo "- Clusters older than 4 hours are automatically cleaned up"
        echo "- Use workflow_dispatch with force_cleanup for immediate cleanup"
        echo "- Schedule runs daily at 11 PM UTC to catch any missed resources"